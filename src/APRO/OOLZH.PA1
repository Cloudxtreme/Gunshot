const
  {---Huffman constants (also defined in UNLZH.ASM)---}
  Threshold = 2;
  LookAheadSize = 60;
  NumChar = (256 - Threshold + LookAheadSize);
  TableSize = (NumChar * 2 - 1);
  Root = TableSize-1;

  {---Misc constants---}
  InBufSize  = 4096;                     {size of input buffer}
  OutBufSize = 4096;                     {nominal size of output buffer}
  OutBufLimit = OutBufSize+LookAheadSize; {actual size of output buffer}

  ExtendedHeaderSize =                {Size of fields added to old header}
         5                            {CRC+OSID+PathHdrSize}
       + 1                            {+PathHdrID}
       + SizeOf(PathStr)              {+Size of FPath}
       + 5                            {+AttrHdrSize+AttHdrID+ExtAttr}
       + 3                            {+FNameHdrSize+FNameHdrID}
       + SizeOf(PathStr)              {+Size of PathStr}
       + 3                            {+CRCHdrSize+CRCHdrID}
       + 4;                           {+ExtCRC+NextHdrSize}

  ShortHeaderSize =
         SizeOf(LzhHeader)            {Full record size}
       - SizeOf(PathStr)              {-Size of FName}
       + 1                            {+The File length byte}
       - ExtendedHeaderSize;          {-Size of extensions}

type
  InBufferType = array[1..InBufSize] of Byte;
  OutBufferType = array[1..OutBufLimit] of Byte;
  TextBufferType = array[0..InBufSize+(LookAheadSize-2)+15] of Byte;
  ByteArray = array[0..65535 - 1] of Byte;
  ByteArrayPtr = ^ByteArray;

  {Define data area for heap-based compression tables}
  ExtraDataRec = record
    LeftSon    : array[1..InBufSize+1] of Word;
    RightSo    : array[1..InBufSize+1+256] of Word;
    Dad        : array[1..InBufSize+1] of Word;
    MatchLen   : Word;
    MatchPos   : Word;
    Filler     : array[1..15] of Byte;
  end;
  ExtraDataPtr = ^ExtraDataRec;

const
  {Table for encoding and decoding the upper 6 bits of position}
  EncodeLen    : array [0..63] of Byte = (
    $03, $04, $04, $04, $05, $05, $05, $05,
    $05, $05, $05, $05, $06, $06, $06, $06,
    $06, $06, $06, $06, $06, $06, $06, $06,
    $07, $07, $07, $07, $07, $07, $07, $07,
    $07, $07, $07, $07, $07, $07, $07, $07,
    $07, $07, $07, $07, $07, $07, $07, $07,
    $08, $08, $08, $08, $08, $08, $08, $08,
    $08, $08, $08, $08, $08, $08, $08, $08);

  EncodeCode  : array [0..63] of Byte = (
    $00, $20, $30, $40, $50, $58, $60, $68,
    $70, $78, $80, $88, $90, $94, $98, $9C,
    $A0, $A4, $A8, $AC, $B0, $B4, $B8, $BC,
    $C0, $C2, $C4, $C6, $C8, $CA, $CC, $CE,
    $D0, $D2, $D4, $D6, $D8, $DA, $DC, $DE,
    $E0, $E2, $E4, $E6, $E8, $EA, $EC, $EE,
    $F0, $F1, $F2, $F3, $F4, $F5, $F6, $F7,
    $F8, $F9, $FA, $FB, $FC, $FD, $FE, $FF);

  {---Encode position values of <pos, len> codes}
  CodeTable : array[0..255] of Byte = (
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $01, $01, $01, $01, $01, $01, $01, $01,
    $01, $01, $01, $01, $01, $01, $01, $01,
    $02, $02, $02, $02, $02, $02, $02, $02,
    $02, $02, $02, $02, $02, $02, $02, $02,
    $03, $03, $03, $03, $03, $03, $03, $03,
    $03, $03, $03, $03, $03, $03, $03, $03,
    $04, $04, $04, $04, $04, $04, $04, $04,
    $05, $05, $05, $05, $05, $05, $05, $05,
    $06, $06, $06, $06, $06, $06, $06, $06,
    $07, $07, $07, $07, $07, $07, $07, $07,
    $08, $08, $08, $08, $08, $08, $08, $08,
    $09, $09, $09, $09, $09, $09, $09, $09,
    $0A, $0A, $0A, $0A, $0A, $0A, $0A, $0A,
    $0B, $0B, $0B, $0B, $0B, $0B, $0B, $0B,
    $0C, $0C, $0C, $0C, $0D, $0D, $0D, $0D,
    $0E, $0E, $0E, $0E, $0F, $0F, $0F, $0F,
    $10, $10, $10, $10, $11, $11, $11, $11,
    $12, $12, $12, $12, $13, $13, $13, $13,
    $14, $14, $14, $14, $15, $15, $15, $15,
    $16, $16, $16, $16, $17, $17, $17, $17,
    $18, $18, $19, $19, $1A, $1A, $1B, $1B,
    $1C, $1C, $1D, $1D, $1E, $1E, $1F, $1F,
    $20, $20, $21, $21, $22, $22, $23, $23,
    $24, $24, $25, $25, $26, $26, $27, $27,
    $28, $28, $29, $29, $2A, $2A, $2B, $2B,
    $2C, $2C, $2D, $2D, $2E, $2E, $2F, $2F,
    $30, $31, $32, $33, $34, $35, $36, $37,
    $38, $39, $3A, $3B, $3C, $3D, $3E, $3F);

  {---Encoded lengths of <pos, len> codes---}
  LengthTable : array[0..255] of Byte = (
    $01, $01, $01, $01, $01, $01, $01, $01,
    $01, $01, $01, $01, $01, $01, $01, $01,
    $01, $01, $01, $01, $01, $01, $01, $01,
    $01, $01, $01, $01, $01, $01, $01, $01,
    $02, $02, $02, $02, $02, $02, $02, $02,
    $02, $02, $02, $02, $02, $02, $02, $02,
    $02, $02, $02, $02, $02, $02, $02, $02,
    $02, $02, $02, $02, $02, $02, $02, $02,
    $02, $02, $02, $02, $02, $02, $02, $02,
    $02, $02, $02, $02, $02, $02, $02, $02,
    $03, $03, $03, $03, $03, $03, $03, $03,
    $03, $03, $03, $03, $03, $03, $03, $03,
    $03, $03, $03, $03, $03, $03, $03, $03,
    $03, $03, $03, $03, $03, $03, $03, $03,
    $03, $03, $03, $03, $03, $03, $03, $03,
    $03, $03, $03, $03, $03, $03, $03, $03,
    $03, $03, $03, $03, $03, $03, $03, $03,
    $03, $03, $03, $03, $03, $03, $03, $03,
    $04, $04, $04, $04, $04, $04, $04, $04,
    $04, $04, $04, $04, $04, $04, $04, $04,
    $04, $04, $04, $04, $04, $04, $04, $04,
    $04, $04, $04, $04, $04, $04, $04, $04,
    $04, $04, $04, $04, $04, $04, $04, $04,
    $04, $04, $04, $04, $04, $04, $04, $04,
    $05, $05, $05, $05, $05, $05, $05, $05,
    $05, $05, $05, $05, $05, $05, $05, $05,
    $05, $05, $05, $05, $05, $05, $05, $05,
    $05, $05, $05, $05, $05, $05, $05, $05,
    $05, $05, $05, $05, $05, $05, $05, $05,
    $05, $05, $05, $05, $05, $05, $05, $05,
    $06, $06, $06, $06, $06, $06, $06, $06,
    $06, $06, $06, $06, $06, $06, $06, $06);

  {---CRC Table---}
  CrcTable: array[0..255] of Word = (
    $0000,  $C0C1,  $C181,  $0140,  $C301,  $03C0,  $0280,  $C241,
    $C601,  $06C0,  $0780,  $C741,  $0500,  $C5C1,  $C481,  $0440,
    $CC01,  $0CC0,  $0D80,  $CD41,  $0F00,  $CFC1,  $CE81,  $0E40,
    $0A00,  $CAC1,  $CB81,  $0B40,  $C901,  $09C0,  $0880,  $C841,
    $D801,  $18C0,  $1980,  $D941,  $1B00,  $DBC1,  $DA81,  $1A40,
    $1E00,  $DEC1,  $DF81,  $1F40,  $DD01,  $1DC0,  $1C80,  $DC41,
    $1400,  $D4C1,  $D581,  $1540,  $D701,  $17C0,  $1680,  $D641,
    $D201,  $12C0,  $1380,  $D341,  $1100,  $D1C1,  $D081,  $1040,
    $F001,  $30C0,  $3180,  $F141,  $3300,  $F3C1,  $F281,  $3240,
    $3600,  $F6C1,  $F781,  $3740,  $F501,  $35C0,  $3480,  $F441,
    $3C00,  $FCC1,  $FD81,  $3D40,  $FF01,  $3FC0,  $3E80,  $FE41,
    $FA01,  $3AC0,  $3B80,  $FB41,  $3900,  $F9C1,  $F881,  $3840,
    $2800,  $E8C1,  $E981,  $2940,  $EB01,  $2BC0,  $2A80,  $EA41,
    $EE01,  $2EC0,  $2F80,  $EF41,  $2D00,  $EDC1,  $EC81,  $2C40,
    $E401,  $24C0,  $2580,  $E541,  $2700,  $E7C1,  $E681,  $2640,
    $2200,  $E2C1,  $E381,  $2340,  $E101,  $21C0,  $2080,  $E041,
    $A001,  $60C0,  $6180,  $A141,  $6300,  $A3C1,  $A281,  $6240,
    $6600,  $A6C1,  $A781,  $6740,  $A501,  $65C0,  $6480,  $A441,
    $6C00,  $ACC1,  $AD81,  $6D40,  $AF01,  $6FC0,  $6E80,  $AE41,
    $AA01,  $6AC0,  $6B80,  $AB41,  $6900,  $A9C1,  $A881,  $6840,
    $7800,  $B8C1,  $B981,  $7940,  $BB01,  $7BC0,  $7A80,  $BA41,
    $BE01,  $7EC0,  $7F80,  $BF41,  $7D00,  $BDC1,  $BC81,  $7C40,
    $B401,  $74C0,  $7580,  $B541,  $7700,  $B7C1,  $B681,  $7640,
    $7200,  $B2C1,  $B381,  $7340,  $B101,  $71C0,  $7080,  $B041,
    $5000,  $90C1,  $9181,  $5140,  $9301,  $53C0,  $5280,  $9241,
    $9601,  $56C0,  $5780,  $9741,  $5500,  $95C1,  $9481,  $5440,
    $9C01,  $5CC0,  $5D80,  $9D41,  $5F00,  $9FC1,  $9E81,  $5E40,
    $5A00,  $9AC1,  $9B81,  $5B40,  $9901,  $59C0,  $5880,  $9841,
    $8801,  $48C0,  $4980,  $8941,  $4B00,  $8BC1,  $8A81,  $4A40,
    $4E00,  $8EC1,  $8F81,  $4F40,  $8D01,  $4DC0,  $4C80,  $8C41,
    $4400,  $84C1,  $8581,  $4540,  $8701,  $47C0,  $4680,  $8641,
    $8201,  $42C0,  $4380,  $8341,  $4100,  $81C1,  $8081,  $4040);

  {---Initialized Freq tree---}
  InitFreq : array[0..TableSize+1] of Word = (
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001, $0001,
    $0001, $0001, $0001, $0001, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002, $0002,
    $0002, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004,
    $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004,
    $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004,
    $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004,
    $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004,
    $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004,
    $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004,
    $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004, $0006,
    $0008, $0008, $0008, $0008, $0008, $0008, $0008, $0008, $0008, $0008,
    $0008, $0008, $0008, $0008, $0008, $0008, $0008, $0008, $0008, $0008,
    $0008, $0008, $0008, $0008, $0008, $0008, $0008, $0008, $0008, $0008,
    $0008, $0008, $0008, $0008, $0008, $0008, $0008, $0008, $000A, $0010,
    $0010, $0010, $0010, $0010, $0010, $0010, $0010, $0010, $0010, $0010,
    $0010, $0010, $0010, $0010, $0010, $0010, $0010, $0010, $001A, $0020,
    $0020, $0020, $0020, $0020, $0020, $0020, $0020, $0020, $003A, $0040,
    $0040, $0040, $0040, $007A, $0080, $00BA, $013A, $FFFF, $1689);

  {---Initialized Parent pointer tree---}
  InitParent : array[0..TableSize+NumChar] of Word = (
    $0274, $0274, $0276, $0276, $0278, $0278, $027A, $027A, $027C, $027C,
    $027E, $027E, $0280, $0280, $0282, $0282, $0284, $0284, $0286, $0286,
    $0288, $0288, $028A, $028A, $028C, $028C, $028E, $028E, $0290, $0290,
    $0292, $0292, $0294, $0294, $0296, $0296, $0298, $0298, $029A, $029A,
    $029C, $029C, $029E, $029E, $02A0, $02A0, $02A2, $02A2, $02A4, $02A4,
    $02A6, $02A6, $02A8, $02A8, $02AA, $02AA, $02AC, $02AC, $02AE, $02AE,
    $02B0, $02B0, $02B2, $02B2, $02B4, $02B4, $02B6, $02B6, $02B8, $02B8,
    $02BA, $02BA, $02BC, $02BC, $02BE, $02BE, $02C0, $02C0, $02C2, $02C2,
    $02C4, $02C4, $02C6, $02C6, $02C8, $02C8, $02CA, $02CA, $02CC, $02CC,
    $02CE, $02CE, $02D0, $02D0, $02D2, $02D2, $02D4, $02D4, $02D6, $02D6,
    $02D8, $02D8, $02DA, $02DA, $02DC, $02DC, $02DE, $02DE, $02E0, $02E0,
    $02E2, $02E2, $02E4, $02E4, $02E6, $02E6, $02E8, $02E8, $02EA, $02EA,
    $02EC, $02EC, $02EE, $02EE, $02F0, $02F0, $02F2, $02F2, $02F4, $02F4,
    $02F6, $02F6, $02F8, $02F8, $02FA, $02FA, $02FC, $02FC, $02FE, $02FE,
    $0300, $0300, $0302, $0302, $0304, $0304, $0306, $0306, $0308, $0308,
    $030A, $030A, $030C, $030C, $030E, $030E, $0310, $0310, $0312, $0312,
    $0314, $0314, $0316, $0316, $0318, $0318, $031A, $031A, $031C, $031C,
    $031E, $031E, $0320, $0320, $0322, $0322, $0324, $0324, $0326, $0326,
    $0328, $0328, $032A, $032A, $032C, $032C, $032E, $032E, $0330, $0330,
    $0332, $0332, $0334, $0334, $0336, $0336, $0338, $0338, $033A, $033A,
    $033C, $033C, $033E, $033E, $0340, $0340, $0342, $0342, $0344, $0344,
    $0346, $0346, $0348, $0348, $034A, $034A, $034C, $034C, $034E, $034E,
    $0350, $0350, $0352, $0352, $0354, $0354, $0356, $0356, $0358, $0358,
    $035A, $035A, $035C, $035C, $035E, $035E, $0360, $0360, $0362, $0362,
    $0364, $0364, $0366, $0366, $0368, $0368, $036A, $036A, $036C, $036C,
    $036E, $036E, $0370, $0370, $0372, $0372, $0374, $0374, $0376, $0376,
    $0378, $0378, $037A, $037A, $037C, $037C, $037E, $037E, $0380, $0380,
    $0382, $0382, $0384, $0384, $0386, $0386, $0388, $0388, $038A, $038A,
    $038C, $038C, $038E, $038E, $0390, $0390, $0392, $0392, $0394, $0394,
    $0396, $0396, $0398, $0398, $039A, $039A, $039C, $039C, $039E, $039E,
    $03A0, $03A0, $03A2, $03A2, $03A4, $03A4, $03A6, $03A6, $03A8, $03A8,
    $03AA, $03AA, $03AC, $03AC, $03AE, $03AE, $03B0, $03B0, $03B2, $03B2,
    $03B4, $03B4, $03B6, $03B6, $03B8, $03B8, $03BA, $03BA, $03BC, $03BC,
    $03BE, $03BE, $03C0, $03C0, $03C2, $03C2, $03C4, $03C4, $03C6, $03C6,
    $03C8, $03C8, $03CA, $03CA, $03CC, $03CC, $03CE, $03CE, $03D0, $03D0,
    $03D2, $03D2, $03D4, $03D4, $03D6, $03D6, $03D8, $03D8, $03DA, $03DA,
    $03DC, $03DC, $03DE, $03DE, $03E0, $03E0, $03E2, $03E2, $03E4, $03E4,
    $03E6, $03E6, $03E8, $03E8, $03EA, $03EA, $03EC, $03EC, $03EE, $03EE,
    $03F0, $03F0, $03F2, $03F2, $03F4, $03F4, $03F6, $03F6, $03F8, $03F8,
    $03FA, $03FA, $03FC, $03FC, $03FE, $03FE, $0400, $0400, $0402, $0402,
    $0404, $0404, $0406, $0406, $0408, $0408, $040A, $040A, $040C, $040C,
    $040E, $040E, $0410, $0410, $0412, $0412, $0414, $0414, $0416, $0416,
    $0418, $0418, $041A, $041A, $041C, $041C, $041E, $041E, $0420, $0420,
    $0422, $0422, $0424, $0424, $0426, $0426, $0428, $0428, $042A, $042A,
    $042C, $042C, $042E, $042E, $0430, $0430, $0432, $0432, $0434, $0434,
    $0436, $0436, $0438, $0438, $043A, $043A, $043C, $043C, $043E, $043E,
    $0440, $0440, $0442, $0442, $0444, $0444, $0446, $0446, $0448, $0448,
    $044A, $044A, $044C, $044C, $044E, $044E, $0450, $0450, $0452, $0452,
    $0454, $0454, $0456, $0456, $0458, $0458, $045A, $045A, $045C, $045C,
    $045E, $045E, $0460, $0460, $0462, $0462, $0464, $0464, $0466, $0466,
    $0468, $0468, $046A, $046A, $046C, $046C, $046E, $046E, $0470, $0470,
    $0472, $0472, $0474, $0474, $0476, $0476, $0478, $0478, $047A, $047A,
    $047C, $047C, $047E, $047E, $0480, $0480, $0482, $0482, $0484, $0484,
    $0486, $0486, $0488, $0488, $048A, $048A, $048C, $048C, $048E, $048E,
    $0490, $0490, $0492, $0492, $0494, $0494, $0496, $0496, $0498, $0498,
    $049A, $049A, $049C, $049C, $049E, $049E, $04A0, $04A0, $04A2, $04A2,
    $04A4, $04A4, $04A6, $04A6, $04A8, $04A8, $04AA, $04AA, $04AC, $04AC,
    $04AE, $04AE, $04B0, $04B0, $04B2, $04B2, $04B4, $04B4, $04B6, $04B6,
    $04B8, $04B8, $04BA, $04BA, $04BC, $04BC, $04BE, $04BE, $04C0, $04C0,
    $04C2, $04C2, $04C4, $04C4, $04C6, $04C6, $04C8, $04C8, $04CA, $04CA,
    $04CC, $04CC, $04CE, $04CE, $04D0, $04D0, $04D2, $04D2, $04D4, $04D4,
    $04D6, $04D6, $04D8, $04D8, $04DA, $04DA, $04DC, $04DC, $04DE, $04DE,
    $04E0, $04E0, $04E2, $04E2, $04E4, $04E4, $0000, $0000, $0002, $0004,
    $0006, $0008, $000A, $000C, $000E, $0010, $0012, $0014, $0016, $0018,
    $001A, $001C, $001E, $0020, $0022, $0024, $0026, $0028, $002A, $002C,
    $002E, $0030, $0032, $0034, $0036, $0038, $003A, $003C, $003E, $0040,
    $0042, $0044, $0046, $0048, $004A, $004C, $004E, $0050, $0052, $0054,
    $0056, $0058, $005A, $005C, $005E, $0060, $0062, $0064, $0066, $0068,
    $006A, $006C, $006E, $0070, $0072, $0074, $0076, $0078, $007A, $007C,
    $007E, $0080, $0082, $0084, $0086, $0088, $008A, $008C, $008E, $0090,
    $0092, $0094, $0096, $0098, $009A, $009C, $009E, $00A0, $00A2, $00A4,
    $00A6, $00A8, $00AA, $00AC, $00AE, $00B0, $00B2, $00B4, $00B6, $00B8,
    $00BA, $00BC, $00BE, $00C0, $00C2, $00C4, $00C6, $00C8, $00CA, $00CC,
    $00CE, $00D0, $00D2, $00D4, $00D6, $00D8, $00DA, $00DC, $00DE, $00E0,
    $00E2, $00E4, $00E6, $00E8, $00EA, $00EC, $00EE, $00F0, $00F2, $00F4,
    $00F6, $00F8, $00FA, $00FC, $00FE, $0100, $0102, $0104, $0106, $0108,
    $010A, $010C, $010E, $0110, $0112, $0114, $0116, $0118, $011A, $011C,
    $011E, $0120, $0122, $0124, $0126, $0128, $012A, $012C, $012E, $0130,
    $0132, $0134, $0136, $0138, $013A, $013C, $013E, $0140, $0142, $0144,
    $0146, $0148, $014A, $014C, $014E, $0150, $0152, $0154, $0156, $0158,
    $015A, $015C, $015E, $0160, $0162, $0164, $0166, $0168, $016A, $016C,
    $016E, $0170, $0172, $0174, $0176, $0178, $017A, $017C, $017E, $0180,
    $0182, $0184, $0186, $0188, $018A, $018C, $018E, $0190, $0192, $0194,
    $0196, $0198, $019A, $019C, $019E, $01A0, $01A2, $01A4, $01A6, $01A8,
    $01AA, $01AC, $01AE, $01B0, $01B2, $01B4, $01B6, $01B8, $01BA, $01BC,
    $01BE, $01C0, $01C2, $01C4, $01C6, $01C8, $01CA, $01CC, $01CE, $01D0,
    $01D2, $01D4, $01D6, $01D8, $01DA, $01DC, $01DE, $01E0, $01E2, $01E4,
    $01E6, $01E8, $01EA, $01EC, $01EE, $01F0, $01F2, $01F4, $01F6, $01F8,
    $01FA, $01FC, $01FE, $0200, $0202, $0204, $0206, $0208, $020A, $020C,
    $020E, $0210, $0212, $0214, $0216, $0218, $021A, $021C, $021E, $0220,
    $0222, $0224, $0226, $0228, $022A, $022C, $022E, $0230, $0232, $0234,
    $0236, $0238, $023A, $023C, $023E, $0240, $0242, $0244, $0246, $0248,
    $024A, $024C, $024E, $0250, $0252, $0254, $0256, $0258, $025A, $025C,
    $025E, $0260, $0262, $0264, $0266, $0268, $026A, $026C, $026E, $0270,
    $0272, $40AB);

  {---Initialized Son pointer tree---}
  InitSon : array[0..TableSize] of Word = (
    $04E6, $04E8, $04EA, $04EC, $04EE, $04F0, $04F2, $04F4, $04F6, $04F8,
    $04FA, $04FC, $04FE, $0500, $0502, $0504, $0506, $0508, $050A, $050C,
    $050E, $0510, $0512, $0514, $0516, $0518, $051A, $051C, $051E, $0520,
    $0522, $0524, $0526, $0528, $052A, $052C, $052E, $0530, $0532, $0534,
    $0536, $0538, $053A, $053C, $053E, $0540, $0542, $0544, $0546, $0548,
    $054A, $054C, $054E, $0550, $0552, $0554, $0556, $0558, $055A, $055C,
    $055E, $0560, $0562, $0564, $0566, $0568, $056A, $056C, $056E, $0570,
    $0572, $0574, $0576, $0578, $057A, $057C, $057E, $0580, $0582, $0584,
    $0586, $0588, $058A, $058C, $058E, $0590, $0592, $0594, $0596, $0598,
    $059A, $059C, $059E, $05A0, $05A2, $05A4, $05A6, $05A8, $05AA, $05AC,
    $05AE, $05B0, $05B2, $05B4, $05B6, $05B8, $05BA, $05BC, $05BE, $05C0,
    $05C2, $05C4, $05C6, $05C8, $05CA, $05CC, $05CE, $05D0, $05D2, $05D4,
    $05D6, $05D8, $05DA, $05DC, $05DE, $05E0, $05E2, $05E4, $05E6, $05E8,
    $05EA, $05EC, $05EE, $05F0, $05F2, $05F4, $05F6, $05F8, $05FA, $05FC,
    $05FE, $0600, $0602, $0604, $0606, $0608, $060A, $060C, $060E, $0610,
    $0612, $0614, $0616, $0618, $061A, $061C, $061E, $0620, $0622, $0624,
    $0626, $0628, $062A, $062C, $062E, $0630, $0632, $0634, $0636, $0638,
    $063A, $063C, $063E, $0640, $0642, $0644, $0646, $0648, $064A, $064C,
    $064E, $0650, $0652, $0654, $0656, $0658, $065A, $065C, $065E, $0660,
    $0662, $0664, $0666, $0668, $066A, $066C, $066E, $0670, $0672, $0674,
    $0676, $0678, $067A, $067C, $067E, $0680, $0682, $0684, $0686, $0688,
    $068A, $068C, $068E, $0690, $0692, $0694, $0696, $0698, $069A, $069C,
    $069E, $06A0, $06A2, $06A4, $06A6, $06A8, $06AA, $06AC, $06AE, $06B0,
    $06B2, $06B4, $06B6, $06B8, $06BA, $06BC, $06BE, $06C0, $06C2, $06C4,
    $06C6, $06C8, $06CA, $06CC, $06CE, $06D0, $06D2, $06D4, $06D6, $06D8,
    $06DA, $06DC, $06DE, $06E0, $06E2, $06E4, $06E6, $06E8, $06EA, $06EC,
    $06EE, $06F0, $06F2, $06F4, $06F6, $06F8, $06FA, $06FC, $06FE, $0700,
    $0702, $0704, $0706, $0708, $070A, $070C, $070E, $0710, $0712, $0714,
    $0716, $0718, $071A, $071C, $071E, $0720, $0722, $0724, $0726, $0728,
    $072A, $072C, $072E, $0730, $0732, $0734, $0736, $0738, $073A, $073C,
    $073E, $0740, $0742, $0744, $0746, $0748, $074A, $074C, $074E, $0750,
    $0752, $0754, $0756, $0758, $0000, $0004, $0008, $000C, $0010, $0014,
    $0018, $001C, $0020, $0024, $0028, $002C, $0030, $0034, $0038, $003C,
    $0040, $0044, $0048, $004C, $0050, $0054, $0058, $005C, $0060, $0064,
    $0068, $006C, $0070, $0074, $0078, $007C, $0080, $0084, $0088, $008C,
    $0090, $0094, $0098, $009C, $00A0, $00A4, $00A8, $00AC, $00B0, $00B4,
    $00B8, $00BC, $00C0, $00C4, $00C8, $00CC, $00D0, $00D4, $00D8, $00DC,
    $00E0, $00E4, $00E8, $00EC, $00F0, $00F4, $00F8, $00FC, $0100, $0104,
    $0108, $010C, $0110, $0114, $0118, $011C, $0120, $0124, $0128, $012C,
    $0130, $0134, $0138, $013C, $0140, $0144, $0148, $014C, $0150, $0154,
    $0158, $015C, $0160, $0164, $0168, $016C, $0170, $0174, $0178, $017C,
    $0180, $0184, $0188, $018C, $0190, $0194, $0198, $019C, $01A0, $01A4,
    $01A8, $01AC, $01B0, $01B4, $01B8, $01BC, $01C0, $01C4, $01C8, $01CC,
    $01D0, $01D4, $01D8, $01DC, $01E0, $01E4, $01E8, $01EC, $01F0, $01F4,
    $01F8, $01FC, $0200, $0204, $0208, $020C, $0210, $0214, $0218, $021C,
    $0220, $0224, $0228, $022C, $0230, $0234, $0238, $023C, $0240, $0244,
    $0248, $024C, $0250, $0254, $0258, $025C, $0260, $0264, $0268, $026C,
    $0270, $0274, $0278, $027C, $0280, $0284, $0288, $028C, $0290, $0294,
    $0298, $029C, $02A0, $02A4, $02A8, $02AC, $02B0, $02B4, $02B8, $02BC,
    $02C0, $02C4, $02C8, $02CC, $02D0, $02D4, $02D8, $02DC, $02E0, $02E4,
    $02E8, $02EC, $02F0, $02F4, $02F8, $02FC, $0300, $0304, $0308, $030C,
    $0310, $0314, $0318, $031C, $0320, $0324, $0328, $032C, $0330, $0334,
    $0338, $033C, $0340, $0344, $0348, $034C, $0350, $0354, $0358, $035C,
    $0360, $0364, $0368, $036C, $0370, $0374, $0378, $037C, $0380, $0384,
    $0388, $038C, $0390, $0394, $0398, $039C, $03A0, $03A4, $03A8, $03AC,
    $03B0, $03B4, $03B8, $03BC, $03C0, $03C4, $03C8, $03CC, $03D0, $03D4,
    $03D8, $03DC, $03E0, $03E4, $03E8, $03EC, $03F0, $03F4, $03F8, $03FC,
    $0400, $0404, $0408, $040C, $0410, $0414, $0418, $041C, $0420, $0424,
    $0428, $042C, $0430, $0434, $0438, $043C, $0440, $0444, $0448, $044C,
    $0450, $0454, $0458, $045C, $0460, $0464, $0468, $046C, $0470, $0474,
    $0478, $047C, $0480, $0484, $0488, $048C, $0490, $0494, $0498, $049C,
    $04A0, $04A4, $04A8, $04AC, $04B0, $04B4, $04B8, $04BC, $04C0, $04C4,
    $04C8, $04CC, $04D0, $04D4, $04D8, $04DC, $04E0, $E805);

var
  LzhHandle : Word;                       {LzhF handle}
  InBuffer : ^InBufferType;               {Pointer to input buffer}
  InBufPos : Word;                        {Index into InBuffer}
  InBufEnd : Word;                        {Last good char in InBuffer}
  NewLzh : File;                          {LZH temp file}
  InFile : File;                          {File to freeze}

  TextBuffer : ^TextBufferType;           {Sliding dictionary}
  ActualTextBuffer : ^TextBufferType;     {Real seg:ofs of TextBuffer}
  EDPtr : ExtraDataPtr;                   {Ptr to extra data tables}
  ActualEDPtr : ^ExtraDataPtr;            {Real seg:ofs of EDPtr}

  OutF : File;                            {Extracted file}
  OutBuffer : ^OutBufferType;             {Pointer to output buffer}
  OutBufPos : Word;                       {Index into OutBuffer}

  {----Huffman decoding arrays (representing a binary tree)-----}
  Freq : array[0..TableSize+1] of Word;
  Parent : array[0..(TableSize+NumChar)] of Integer;
  Son : array[0..TableSize] of Integer;

var
  OrigFileSize  : LongInt;                {Size of unfrozen file}      {!!.01}
  BytesWritten  : LongInt;
  SaveBytesLeft : LongInt;

  {LZH encoding vars}
  MatchLen : Integer;
  PutBuf : Word;                         {Output bit buffer}
  PutLen : Byte;                         {Output bit buffer length}
  TextSize : LongInt;                    {Input text size counter}
  CodeSize : LongInt;                    {Output code size counter}
  NextDisplay : LongInt;                 {Milestone for next display update}
  CRC : Word;

const
  HeaderSize : Word = ShortHeaderSize;   {Assume use of old header}
  ExtendedHeader : Boolean = False;      {Flag use of extended header}
  FreezeID : HeadIdType = '-lh1-';

var
  FirstExtHdrSize : Word;

