const
  {Run-time constants}
  DefMinRepeatCnt : Byte = 4;      {Minimum characters to use repeat prefix}
  FastAbort : Boolean = False;     {Use Error packet for aborting}
  DefHibitPrefix : Char = '&';     {Default char for hibit prefixing}

  {#Z+}
  CancelWait : Word = 182;         {Wait 10 seconds for cancel transmit}

  {Compile-time constants}
  DiscardChar = 'D';               {For signaling an abort}
  MaxWindowSlots = 27;             {Avoids MS-Kermit bug}
  {#Z-}

  {For estimating protocol transfer times}
  KermitOverhead : Word = 20;      {Bytes of overhead for each block}
  KermitTurnDelay : Word = 1000;   {Msecs of turn around delay}
  SWCKermitTurnDelay : Word = 5;   {Msecs of turn around delay on SWC xfers}

  {#Z+}
  {Packet types}
  KBreak           = 'B';        {Break transmission (EOT)}
  KData            = 'D';        {Data packet}
  KError           = 'E';        {Error packet}
  KFile            = 'F';        {File header packet}
  KNak             = 'N';        {Negative acknowledge packet}
  KSendInit        = 'S';        {Initial packet (exchange options)}
  KDisplay         = 'X';        {Display text on screen packet}
  KAck             = 'Y';        {Acknowledge packet}
  KEndOfFile       = 'Z';        {End of file packet}
  {#Z-}

type
  {#Z+}
  {Kermit state machine states}
  KermitStateType = (
    {Transmit states}
    tkInit,           {Send SendInit packet}
    tkInitReply,      {Wait for header reply to SendInit}
    tkCollectInit,    {Collect data packet for SendInit reply}
    tkOpenFile,       {Open next file to transmit}
    tkSendFile,       {Send File packet}
    tkFileReply,      {Wait for header reply to File}
    tkCollectFile,    {Collect data packet for File reply}
    tkCheckTable,     {Check table for space, escape next block if room}
    tkSendData,       {Send next Data packet}
    tkBlockReply,     {Wait for header reply to Data}
    tkCollectBlock,   {Collect data packet for Data reply}
    tkSendEof,        {Send Eof packet}
    tkEofReply,       {Wait for header reply to Eof}
    tkCollectEof,     {Collect data packet for Eof reply}
    tkSendBreak,      {Send Break packet}
    tkBreakReply,     {Wait for header reply to Break}
    tkCollectBreak,   {Collect data packet for Break reply}
    tkComplete,       {Send Complete packet}
    tkWaitCancel,     {Wait for cancel to go out}
    tkError,          {Done, log and clean up}
    tkDone,           {Signals end of protocol}

    {Receive states}
    rkInit,           {Set initial timer}
    rkGetInit,        {Wait for SendInit header}
    rkCollectInit,    {Collect SendInit data field}
    rkGetFile,        {Wait for File header}
    rkCollectFile,    {Collect File data field}
    rkGetData,        {Wait for Data header}
    rkCollectData,    {Collect Data data field}
    rkComplete,       {Normal completion}
    rkWaitCancel,     {Wait for cancel to go out}
    rkError,          {Error completion}
    rkDone);          {Signals end of protocolcompletion}

  {Header state machine states}
  KHeaderStateType = (
    khsNone,          {0  No header collection in process}
    khsGotMark,       {1  Got mark}
    khsGotLen,        {2  Got length byte}
    khsGotSeq,        {3  Got sequence number}
    khsGotType,       {4  Got packet type}
    khsGotLong1,      {5  Got first byte of long length}
    khsGotLong2,      {6  Got second byte of long length}
    khsDone);         {7  Got everything}

  KDataStateType = (
    dsData,           {0  Collecting data bytes}
    dsCheck1,         {1  Collecting check bytes}
    dsCheck2,         {2  Collecting check bytes}
    dsCheck3);        {3  Collecting check bytes}

  {Kermit option record}
  KermitOptionRec = record
    MaxPacketLen : Byte;
    MaxTimeout : Byte;
    PadCount : Byte;
    PadChar : Char;
    Terminator : Char;
    CtlPrefix : Char;
    HibitPrefix : Char;
    Check : Char;
    RepeatPrefix : Char;
    CapabilitiesMask : Byte;
    WindowSize : Byte;
    MaxLongPacketLen : Word;
  end;

type
  {Holds info about Kermit data in Window slots}
  SlotInfo = record
    InUse   : Boolean;
    Len     : Integer;
    Seq     : Integer;
    Acked   : Boolean;
    Retries : Byte;
  end;

  {Sliding window table, info}
  InfoTableType = array[1..MaxWindowSlots] of SlotInfo;

  {Sliding window table, data}
  DataTablePtr = ^DataTableType;
  DataTableType = array[0..(MaxWindowSlots*1024)-1] of Char;
  {#Z-}

const
  {Default kermit options (from the Kermit Protocol Manual}
  DefKermitOptions : KermitOptionRec =
    (MaxPacketLen : 80;                    {80 characters}
     MaxTimeout :  5;                      {5 seconds}
     PadCount : 0;                         {No pad chars}
     PadChar : #0;                         {Null pad char}
     Terminator : cCR;                     {Carriage return}
     CtlPrefix : '#';                      {'#' char}
     HibitPrefix : 'Y';                    {Space means no hibit prefixing}
     Check : '1';                          {1 byte chksum}
     RepeatPrefix : '~';                   {Default repeat prefix}
     CapabilitiesMask : 0;                 {No default extended caps}
     WindowSize : 0;                       {No default windows}
     MaxLongPacketLen : 0);                {No default long packets}

  {#Z+}
  {Default kermit options (from the Kermit Protocol Manual}
  MissingKermitOptions : KermitOptionRec =
    (MaxPacketLen : 80;                    {80 characters}
     MaxTimeout :  5;                      {5 seconds}
     PadCount : 0;                         {No pad chars}
     PadChar : #0;                         {Null pad char}
     Terminator : cCR;                     {Carriage return}
     CtlPrefix : '#';                      {'#' char}
     HibitPrefix : ' ';                    {No hibit prefixing}
     Check : '1';                          {1 byte chksum}
     RepeatPrefix : ' ';                   {Default repeat prefix}
     CapabilitiesMask : 0;                 {No default extended caps}
     WindowSize : 0;                       {No default windows}
     MaxLongPacketLen : 0);                {No default long packets}
   {#Z-}

type
  {Pointer to a protocol record}
  KermitPtr = ^KermitProtocol;

  {A Kermit protocol record}
  KermitProtocol = record
    {General...}
    PData            : ProtocolDataPtr; {General protocol data}
    DataLen          : Word;            {Length of sent packet data field}
    RecDataLen       : Word;            {Length of recd packet data field}
    ActualDataLen    : Word;            {Length decoded data bytes}
    DataBlock        : ^DataBlockType;  {Standard data block (data field)}

    KermitState      : KermitStateType; {Current state of machine}
    HeaderState      : KHeaderStateType;{Current header state}
    DataState        : KDataStateType;  {Current data state}
    ReplyTimer       : EventTimer;      {Used to timeout replies}
    PacketType       : Char;            {Type of last packet}
    KermitOptions    : KermitOptionRec; {Options for this transfer}
    RmtKermitOptions : KermitOptionRec; {Options remote says to use}
    UsingHibit       : Boolean;         {True if prefixing hibit chars}
    UsingRepeat      : Boolean;         {True if using repeat cnt feature}
    MinRepeatCnt     : Byte;            {Min threshold to use repeat feature}
    RecBlockNum      : Word;            {Blocknum of last received packet}
    ExpectedAck      : Word;            {Blocknum of next expected Ack}
    BlockCheck2      : Word;            {For holding Crc check value}
    CheckKnown       : Boolean;         {True if we've agreed on check type}
    LPInUse          : Boolean;         {True if we're using long packets}
    ReceiveInProgress  : Boolean;       {True if receiving a file}
    TransmitInProgress : Boolean;       {True if transmitting a file}

    {Transmitting...}
    WorkBlock        : ^DataBlockType;  {Holds transmit temp pool}
    WorkLen          : Word;            {Count of bytes in temp pool}
    LastWorkIndex    : Word;            {For managing data pool}
    WorkEndPending   : Boolean;         {True if no more WorkBlocks}

    TableSize        : Byte;            {Size of window table, 1-31}
    InfoTable        : InfoTableType;   {Window table info}
    DataTable        : DataTablePtr;    {Window table data}
    TableHead        : Byte;            {Newest used slot}
    TableTail        : Byte;            {Oldest used slot, rcv only}
    Next2Send        : Integer;         {Slot in table to send}
    BlockIndex       : Word;            {Collects data field}

    {Temp variables used in state machine}
    SaveStatus       : Word;            {Save status between states}
    SaveCheck        : LongInt;         {Save incoming check between states}
    SaveCheck2       : Word;            {Save incoming check between states}
    TimerStarted     : Boolean;         {True once timer has been started}
    Skipped          : Boolean;         {True if file was not accepted}
    GetLong          : Boolean;         {True for long header}
    LongCheck        : Byte;            {Long header checksum}         {!!.03}
    TempCheck        : Char;            {Used for collecting check chars}
    C1               : Char;            {Used for collecting check chars}
    C2               : Char;            {Used for collecting check chars}
    C3               : Char;            {Used for collecting check chars}
  end;

{$IFDEF UsePModeDLL}

procedure InitKermit(var P : ProtocolRecPtr; PortPtr : PortRecPtr); Export;
procedure InitCustomKermit(var P : ProtocolRecPtr;
                           PortPtr : PortRecPtr;
                           KOptions : KermitOptionRec;
                           Options : Word); Export;
procedure DoneKermit(var P : ProtocolRecPtr); Export;
procedure SetKermitOptions(P : ProtocolRecPtr; KOptions : KermitOptionRec); Export;
procedure SetMaxPacketLen(P : ProtocolRecPtr; MaxLen : Byte); Export;
procedure SetMaxLongPacketLen(P : ProtocolRecPtr; MaxLen : Word); Export;
procedure SetMaxWindows(P : ProtocolRecPtr; MaxNum : Byte); Export;
procedure SetSWCTurnDelay(P : ProtocolRecPtr; TrnDelay : Word); Export;
procedure SetMaxTimeoutSecs(P : ProtocolRecPtr; MaxTimeout : Byte); Export;
procedure SetPacketPadding(P : ProtocolRecPtr; C : Char; Count : Byte); Export;
procedure SetTerminator(P : ProtocolRecPtr; C : Char); Export;
procedure SetCtlPrefix(P : ProtocolRecPtr; C : Char); Export;
procedure SetHibitPrefix(P : ProtocolRecPtr; C : Char); Export;
procedure SetRepeatPrefix(P : ProtocolRecPtr; C : Char); Export;
procedure SetKermitCheck(P : ProtocolRecPtr; CType : Byte); Export;
function GetSwcSize(P : ProtocolRecPtr) : Byte; Export;
procedure GetLPStatus(P : ProtocolRecPtr;
                      var InUse : Boolean;
                      var PacketSize : Word); Export;
function WindowsUsed(P : ProtocolRecPtr) : Word; Export;
procedure PrepareTransmitPartKM(P : ProtocolRecPtr); Export;
function ProtocolTransmitPartKM(P : ProtocolRecPtr) : ProtocolStateType; Export;
procedure ProtocolTransmitKM(P : ProtocolRecPtr); Export;
procedure PrepareReceivePartKM(P : ProtocolRecPtr); Export;
function ProtocolReceivePartKM(P : ProtocolRecPtr) : ProtocolStateType; Export;
procedure ProtocolReceiveKM(P : ProtocolRecPtr); Export;
procedure kpFinishWriting(P : ProtocolRecPtr); Export;

{$ELSE}

procedure InitKermit(var P : ProtocolRecPtr; PortPtr : PortRecPtr);
procedure InitCustomKermit(var P : ProtocolRecPtr;
                           PortPtr : PortRecPtr;
                           KOptions : KermitOptionRec;
                           Options : Word);
procedure DoneKermit(var P : ProtocolRecPtr);
procedure SetKermitOptions(P : ProtocolRecPtr; KOptions : KermitOptionRec);
procedure SetMaxPacketLen(P : ProtocolRecPtr; MaxLen : Byte);
procedure SetMaxLongPacketLen(P : ProtocolRecPtr; MaxLen : Word);
procedure SetMaxWindows(P : ProtocolRecPtr; MaxNum : Byte);
procedure SetSWCTurnDelay(P : ProtocolRecPtr; TrnDelay : Word);
procedure SetMaxTimeoutSecs(P : ProtocolRecPtr; MaxTimeout : Byte);
procedure SetPacketPadding(P : ProtocolRecPtr; C : Char; Count : Byte);
procedure SetTerminator(P : ProtocolRecPtr; C : Char);
procedure SetCtlPrefix(P : ProtocolRecPtr; C : Char);
procedure SetHibitPrefix(P : ProtocolRecPtr; C : Char);
procedure SetRepeatPrefix(P : ProtocolRecPtr; C : Char);
procedure SetKermitCheck(P : ProtocolRecPtr; CType : Byte);
function GetSwcSize(P : ProtocolRecPtr) : Byte;
procedure GetLPStatus(P : ProtocolRecPtr;
                      var InUse : Boolean;
                      var PacketSize : Word);
function WindowsUsed(P : ProtocolRecPtr) : Word;
procedure PrepareTransmitPartKM(P : ProtocolRecPtr);
function ProtocolTransmitPartKM(P : ProtocolRecPtr) : ProtocolStateType;
procedure ProtocolTransmitKM(P : ProtocolRecPtr);
procedure PrepareReceivePartKM(P : ProtocolRecPtr);
function ProtocolReceivePartKM(P : ProtocolRecPtr) : ProtocolStateType;
procedure ProtocolReceiveKM(P : ProtocolRecPtr);
procedure kpFinishWriting(P : ProtocolRecPtr);

{$ENDIF}
